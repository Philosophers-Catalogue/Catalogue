// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using Philosophers_Catalogue;
using Philosophers_Catalogue.Models.Enums;

#nullable disable

namespace Philosophers_Catalogue.Migrations
{
    [DbContext(typeof(PhilosophersCatalogueDbContext))]
    [Migration("20250511144605_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "interaction_type", new[] { "dislike", "like", "none", "read_complete", "read_start", "save_for_later", "view" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_type", new[] { "branch", "category_school", "not_specified", "notion", "philosopher", "work" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "work_types", new[] { "book", "collection", "essay", "interview", "lecture", "none", "quotes", "treatise" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategorySchoolNotion", b =>
                {
                    b.Property<Guid>("NotionsNotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategorySchoolsCategorySchoolId")
                        .HasColumnType("uuid");

                    b.HasKey("NotionsNotionId", "CategorySchoolsCategorySchoolId");

                    b.HasIndex("CategorySchoolsCategorySchoolId");

                    b.ToTable("CategorySchoolNotion");

                    b.HasData(
                        new
                        {
                            NotionsNotionId = new Guid("b624a80b-2594-4f57-b300-35dfd470087e"),
                            CategorySchoolsCategorySchoolId = new Guid("a1a347a7-c12a-4eb7-a13c-72a623ff7a1e")
                        },
                        new
                        {
                            NotionsNotionId = new Guid("8261284d-1b86-432f-bd91-b6c5d8f9f191"),
                            CategorySchoolsCategorySchoolId = new Guid("4c1c75a3-5bd2-4fcb-9a37-2a9912a6d63f")
                        },
                        new
                        {
                            NotionsNotionId = new Guid("e403af49-1a31-4dd9-984e-43b1dce3b43f"),
                            CategorySchoolsCategorySchoolId = new Guid("6f3b70c6-b1ef-4d91-b6f7-6aebda2c27b6")
                        },
                        new
                        {
                            NotionsNotionId = new Guid("6d4db55d-8c51-4fcb-b2c4-2b25f75a9cc3"),
                            CategorySchoolsCategorySchoolId = new Guid("6f3b70c6-b1ef-4d91-b6f7-6aebda2c27b6")
                        },
                        new
                        {
                            NotionsNotionId = new Guid("6d4db55d-8c51-4fcb-b2c4-2b25f75a9cc3"),
                            CategorySchoolsCategorySchoolId = new Guid("ca9983b1-b143-4d0b-b6b7-5ed003efef59")
                        },
                        new
                        {
                            NotionsNotionId = new Guid("3cf7e7fd-fb56-42b9-bd2e-8c0bb0f2a057"),
                            CategorySchoolsCategorySchoolId = new Guid("a8e7dba9-05b2-4bb5-91ae-e40182b3cd44")
                        },
                        new
                        {
                            NotionsNotionId = new Guid("db90ef98-0a7e-4e7e-b730-9981e407d31d"),
                            CategorySchoolsCategorySchoolId = new Guid("d269cbd7-c08f-4af4-86f1-340f8123b94b")
                        },
                        new
                        {
                            NotionsNotionId = new Guid("72e3c381-693e-46ae-b6d4-c74ed0e03f30"),
                            CategorySchoolsCategorySchoolId = new Guid("a4f9ef38-9e4e-4050-8a1f-7bb6a0b2964e")
                        });
                });

            modelBuilder.Entity("CategorySchoolPhilosopher", b =>
                {
                    b.Property<Guid>("PhilosophersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategorySchoolsCategorySchoolId")
                        .HasColumnType("uuid");

                    b.HasKey("PhilosophersId", "CategorySchoolsCategorySchoolId");

                    b.HasIndex("CategorySchoolsCategorySchoolId");

                    b.ToTable("CategorySchoolPhilosopher");

                    b.HasData(
                        new
                        {
                            PhilosophersId = new Guid("a228c5ef-ec5e-4eb0-b9a3-04ea1579fae0"),
                            CategorySchoolsCategorySchoolId = new Guid("a1a347a7-c12a-4eb7-a13c-72a623ff7a1e")
                        },
                        new
                        {
                            PhilosophersId = new Guid("a228c5ef-ec5e-4eb0-b9a3-04ea1579fae0"),
                            CategorySchoolsCategorySchoolId = new Guid("d69a7582-51d4-42d9-b0ad-6c5c4cebc47a")
                        },
                        new
                        {
                            PhilosophersId = new Guid("c0a792dd-3495-42ea-8011-dcc1e3702cf5"),
                            CategorySchoolsCategorySchoolId = new Guid("43c03a85-8af5-4bc3-9a2c-7b34cabc8dbb")
                        },
                        new
                        {
                            PhilosophersId = new Guid("c0a792dd-3495-42ea-8011-dcc1e3702cf5"),
                            CategorySchoolsCategorySchoolId = new Guid("d69a7582-51d4-42d9-b0ad-6c5c4cebc47a")
                        },
                        new
                        {
                            PhilosophersId = new Guid("c0a792dd-3495-42ea-8011-dcc1e3702cf5"),
                            CategorySchoolsCategorySchoolId = new Guid("f1cb027b-7f7e-4645-8668-b1526fdb7c86")
                        },
                        new
                        {
                            PhilosophersId = new Guid("a72d3eac-0d82-4225-8bb3-cbe47c154b6d"),
                            CategorySchoolsCategorySchoolId = new Guid("4c1c75a3-5bd2-4fcb-9a37-2a9912a6d63f")
                        },
                        new
                        {
                            PhilosophersId = new Guid("a72d3eac-0d82-4225-8bb3-cbe47c154b6d"),
                            CategorySchoolsCategorySchoolId = new Guid("1a6813df-3c87-4e00-b248-8a539ad6efb8")
                        },
                        new
                        {
                            PhilosophersId = new Guid("d249f9e2-bb3c-4e30-8611-7b573bfa1a97"),
                            CategorySchoolsCategorySchoolId = new Guid("6f3b70c6-b1ef-4d91-b6f7-6aebda2c27b6")
                        },
                        new
                        {
                            PhilosophersId = new Guid("f1fd91e2-f7b2-4050-9ef4-34510e8f55b0"),
                            CategorySchoolsCategorySchoolId = new Guid("6f3b70c6-b1ef-4d91-b6f7-6aebda2c27b6")
                        },
                        new
                        {
                            PhilosophersId = new Guid("f1fd91e2-f7b2-4050-9ef4-34510e8f55b0"),
                            CategorySchoolsCategorySchoolId = new Guid("ca9983b1-b143-4d0b-b6b7-5ed003efef59")
                        },
                        new
                        {
                            PhilosophersId = new Guid("f1fd91e2-f7b2-4050-9ef4-34510e8f55b0"),
                            CategorySchoolsCategorySchoolId = new Guid("d8c3503a-cffc-4031-aec5-3ae5e065c9db")
                        },
                        new
                        {
                            PhilosophersId = new Guid("7c6747a3-5d0c-4e60-9b3e-3205ee14e09b"),
                            CategorySchoolsCategorySchoolId = new Guid("6f3b70c6-b1ef-4d91-b6f7-6aebda2c27b6")
                        },
                        new
                        {
                            PhilosophersId = new Guid("7c6747a3-5d0c-4e60-9b3e-3205ee14e09b"),
                            CategorySchoolsCategorySchoolId = new Guid("9fbed9f3-0307-4d1d-85e2-40e65b9d11e2")
                        },
                        new
                        {
                            PhilosophersId = new Guid("7c6747a3-5d0c-4e60-9b3e-3205ee14e09b"),
                            CategorySchoolsCategorySchoolId = new Guid("d8c3503a-cffc-4031-aec5-3ae5e065c9db")
                        },
                        new
                        {
                            PhilosophersId = new Guid("008d29a5-5f43-4a7a-a425-726279154c08"),
                            CategorySchoolsCategorySchoolId = new Guid("d269cbd7-c08f-4af4-86f1-340f8123b94b")
                        },
                        new
                        {
                            PhilosophersId = new Guid("008d29a5-5f43-4a7a-a425-726279154c08"),
                            CategorySchoolsCategorySchoolId = new Guid("d9f7b18b-2523-46e5-a5c7-5df6d92fcf92")
                        },
                        new
                        {
                            PhilosophersId = new Guid("fa49f7a1-78db-41cf-9a71-d754a8509d3e"),
                            CategorySchoolsCategorySchoolId = new Guid("a8e7dba9-05b2-4bb5-91ae-e40182b3cd44")
                        },
                        new
                        {
                            PhilosophersId = new Guid("fa49f7a1-78db-41cf-9a71-d754a8509d3e"),
                            CategorySchoolsCategorySchoolId = new Guid("d9f7b18b-2523-46e5-a5c7-5df6d92fcf92")
                        },
                        new
                        {
                            PhilosophersId = new Guid("fca2f46b-8a3f-4268-901f-3021c7a62df2"),
                            CategorySchoolsCategorySchoolId = new Guid("a8e7dba9-05b2-4bb5-91ae-e40182b3cd44")
                        },
                        new
                        {
                            PhilosophersId = new Guid("fca2f46b-8a3f-4268-901f-3021c7a62df2"),
                            CategorySchoolsCategorySchoolId = new Guid("d9f7b18b-2523-46e5-a5c7-5df6d92fcf92")
                        },
                        new
                        {
                            PhilosophersId = new Guid("d87ed2d5-24df-4054-b982-7640dc0e36c3"),
                            CategorySchoolsCategorySchoolId = new Guid("d269cbd7-c08f-4af4-86f1-340f8123b94b")
                        },
                        new
                        {
                            PhilosophersId = new Guid("d87ed2d5-24df-4054-b982-7640dc0e36c3"),
                            CategorySchoolsCategorySchoolId = new Guid("d9f7b18b-2523-46e5-a5c7-5df6d92fcf92")
                        },
                        new
                        {
                            PhilosophersId = new Guid("a190be46-1e46-47e9-a6a2-b6d35cba17f1"),
                            CategorySchoolsCategorySchoolId = new Guid("8128a0e4-6c1b-49a2-9b11-2f1930a9ecdc")
                        },
                        new
                        {
                            PhilosophersId = new Guid("a190be46-1e46-47e9-a6a2-b6d35cba17f1"),
                            CategorySchoolsCategorySchoolId = new Guid("84250e5a-f4e3-4d08-975f-fb68e879eae5")
                        },
                        new
                        {
                            PhilosophersId = new Guid("d2854bb6-9f28-4c8a-a2a5-82c748c5d83e"),
                            CategorySchoolsCategorySchoolId = new Guid("a4f9ef38-9e4e-4050-8a1f-7bb6a0b2964e")
                        },
                        new
                        {
                            PhilosophersId = new Guid("d2854bb6-9f28-4c8a-a2a5-82c748c5d83e"),
                            CategorySchoolsCategorySchoolId = new Guid("5a4b54cb-36b7-4f9e-a028-3347d7c38de0")
                        },
                        new
                        {
                            PhilosophersId = new Guid("529a3704-c1a1-4bcd-9af1-12676c07a278"),
                            CategorySchoolsCategorySchoolId = new Guid("a4f9ef38-9e4e-4050-8a1f-7bb6a0b2964e")
                        },
                        new
                        {
                            PhilosophersId = new Guid("529a3704-c1a1-4bcd-9af1-12676c07a278"),
                            CategorySchoolsCategorySchoolId = new Guid("6f3b70c6-b1ef-4d91-b6f7-6aebda2c27b6")
                        },
                        new
                        {
                            PhilosophersId = new Guid("4f789f71-7e29-49e2-8fc9-18334f09a97f"),
                            CategorySchoolsCategorySchoolId = new Guid("a4f9ef38-9e4e-4050-8a1f-7bb6a0b2964e")
                        },
                        new
                        {
                            PhilosophersId = new Guid("4f789f71-7e29-49e2-8fc9-18334f09a97f"),
                            CategorySchoolsCategorySchoolId = new Guid("6f3b70c6-b1ef-4d91-b6f7-6aebda2c27b6")
                        },
                        new
                        {
                            PhilosophersId = new Guid("4c6d4f23-3c60-4f4e-bbc0-0e70b83cfb77"),
                            CategorySchoolsCategorySchoolId = new Guid("a4f9ef38-9e4e-4050-8a1f-7bb6a0b2964e")
                        },
                        new
                        {
                            PhilosophersId = new Guid("4c6d4f23-3c60-4f4e-bbc0-0e70b83cfb77"),
                            CategorySchoolsCategorySchoolId = new Guid("5a4b54cb-36b7-4f9e-a028-3347d7c38de0")
                        },
                        new
                        {
                            PhilosophersId = new Guid("e93bb57f-c81d-4a4f-b5ae-fbcb3493c0e7"),
                            CategorySchoolsCategorySchoolId = new Guid("d8c3503a-cffc-4031-aec5-3ae5e065c9db")
                        },
                        new
                        {
                            PhilosophersId = new Guid("25579215-4d3e-4205-981a-27ef7083a83c"),
                            CategorySchoolsCategorySchoolId = new Guid("f353cd4d-396e-4bd9-bb29-08a8c2fd3907")
                        },
                        new
                        {
                            PhilosophersId = new Guid("25579215-4d3e-4205-981a-27ef7083a83c"),
                            CategorySchoolsCategorySchoolId = new Guid("d8c3503a-cffc-4031-aec5-3ae5e065c9db")
                        });
                });

            modelBuilder.Entity("CategorySchoolWork", b =>
                {
                    b.Property<Guid>("WorksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategorySchoolsCategorySchoolId")
                        .HasColumnType("uuid");

                    b.HasKey("WorksId", "CategorySchoolsCategorySchoolId");

                    b.HasIndex("CategorySchoolsCategorySchoolId");

                    b.ToTable("CategorySchoolWork");

                    b.HasData(
                        new
                        {
                            WorksId = new Guid("3eb03c5e-d5a6-4704-833a-c7d41d223089"),
                            CategorySchoolsCategorySchoolId = new Guid("a1a347a7-c12a-4eb7-a13c-72a623ff7a1e")
                        },
                        new
                        {
                            WorksId = new Guid("3eb03c5e-d5a6-4704-833a-c7d41d223089"),
                            CategorySchoolsCategorySchoolId = new Guid("d69a7582-51d4-42d9-b0ad-6c5c4cebc47a")
                        },
                        new
                        {
                            WorksId = new Guid("86b5e3f1-5b32-42f1-94b3-948c0623727e"),
                            CategorySchoolsCategorySchoolId = new Guid("43c03a85-8af5-4bc3-9a2c-7b34cabc8dbb")
                        },
                        new
                        {
                            WorksId = new Guid("c6a32d79-d78c-4b5e-90aa-1a680d7fc130"),
                            CategorySchoolsCategorySchoolId = new Guid("4c1c75a3-5bd2-4fcb-9a37-2a9912a6d63f")
                        },
                        new
                        {
                            WorksId = new Guid("c6a32d79-d78c-4b5e-90aa-1a680d7fc130"),
                            CategorySchoolsCategorySchoolId = new Guid("1a6813df-3c87-4e00-b248-8a539ad6efb8")
                        },
                        new
                        {
                            WorksId = new Guid("6ff8c3b7-e212-4a2d-b3f0-399b1c81350f"),
                            CategorySchoolsCategorySchoolId = new Guid("6f3b70c6-b1ef-4d91-b6f7-6aebda2c27b6")
                        },
                        new
                        {
                            WorksId = new Guid("f4ed4dc0-d69c-494f-a7a6-8f83de9cf862"),
                            CategorySchoolsCategorySchoolId = new Guid("9fbed9f3-0307-4d1d-85e2-40e65b9d11e2")
                        },
                        new
                        {
                            WorksId = new Guid("f4ed4dc0-d69c-494f-a7a6-8f83de9cf862"),
                            CategorySchoolsCategorySchoolId = new Guid("6f3b70c6-b1ef-4d91-b6f7-6aebda2c27b6")
                        },
                        new
                        {
                            WorksId = new Guid("fcd0984e-3e80-4993-8e28-32bd843b1059"),
                            CategorySchoolsCategorySchoolId = new Guid("d269cbd7-c08f-4af4-86f1-340f8123b94b")
                        },
                        new
                        {
                            WorksId = new Guid("34f19353-1d4f-4e3b-91e1-4e83b23e7b5c"),
                            CategorySchoolsCategorySchoolId = new Guid("a4f9ef38-9e4e-4050-8a1f-7bb6a0b2964e")
                        },
                        new
                        {
                            WorksId = new Guid("a58f52a0-44c2-41bc-8928-29a99cf5d4cf"),
                            CategorySchoolsCategorySchoolId = new Guid("a4f9ef38-9e4e-4050-8a1f-7bb6a0b2964e")
                        },
                        new
                        {
                            WorksId = new Guid("3f1b9e6a-39f1-4f33-9ea5-7b6a68a9e267"),
                            CategorySchoolsCategorySchoolId = new Guid("f353cd4d-396e-4bd9-bb29-08a8c2fd3907")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NotionWork", b =>
                {
                    b.Property<Guid>("NotionsNotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelatedItemsId")
                        .HasColumnType("uuid");

                    b.HasKey("NotionsNotionId", "RelatedItemsId");

                    b.HasIndex("RelatedItemsId");

                    b.ToTable("NotionWork");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("WikipediaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a19db7ce-cf0c-4dc1-bf2a-ec4f192d1240"),
                            Description = "Philosophical study of beauty and taste.",
                            Name = "Эстетика"
                        },
                        new
                        {
                            Id = new Guid("9b99ebf2-d3f7-4421-a9df-3d6a8cfa8e11"),
                            Description = "Theory of knowledge, especially with regard to its methods, validity, and scope.",
                            Name = "Эпистемология"
                        },
                        new
                        {
                            Id = new Guid("73a1b7a9-9be5-4eb2-a5bc-b703b4e3c2e5"),
                            Description = "Moral philosophy, involves systematizing, defending, and recommending concepts of right and wrong conduct.",
                            Name = "Этика"
                        },
                        new
                        {
                            Id = new Guid("d4623a52-4e63-42e6-b8a3-8750ad264f7c"),
                            Description = "Study of reasoning and argument.",
                            Name = "Логика"
                        },
                        new
                        {
                            Id = new Guid("9f04ed88-7f30-43ef-ae69-c3731b802496"),
                            Description = "Branch of philosophy that examines the fundamental nature of reality, including the relationship between mind and matter, substance and attribute, potentiality and actuality.",
                            Name = "Метафизика"
                        });
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.CategorySchool", b =>
                {
                    b.Property<Guid>("CategorySchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("ParentCategorySchoolId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WikipediaId")
                        .HasColumnType("integer");

                    b.HasKey("CategorySchoolId");

                    b.HasIndex("BranchId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentCategorySchoolId");

                    b.ToTable("CategorySchools");

                    b.HasData(
                        new
                        {
                            CategorySchoolId = new Guid("a1a347a7-c12a-4eb7-a13c-72a623ff7a1e"),
                            BranchId = new Guid("9f04ed88-7f30-43ef-ae69-c3731b802496"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "The philosophy of Plato and philosophical systems closely derived from it.",
                            Name = "Платонизм (Platonism)",
                            ParentCategorySchoolId = new Guid("d69a7582-51d4-42d9-b0ad-6c5c4cebc47a"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 201
                        },
                        new
                        {
                            CategorySchoolId = new Guid("43c03a85-8af5-4bc3-9a2c-7b34cabc8dbb"),
                            BranchId = new Guid("9f04ed88-7f30-43ef-ae69-c3731b802496"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A tradition of philosophy that takes its defining inspiration from the work of Aristotle.",
                            Name = "Аристотелизм (Aristotelianism)",
                            ParentCategorySchoolId = new Guid("d69a7582-51d4-42d9-b0ad-6c5c4cebc47a"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 202
                        },
                        new
                        {
                            CategorySchoolId = new Guid("4c1c75a3-5bd2-4fcb-9a37-2a9912a6d63f"),
                            BranchId = new Guid("9b99ebf2-d3f7-4421-a9df-3d6a8cfa8e11"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Philosophy of Immanuel Kant, a German philosopher.",
                            Name = "Кантианство (Kantianism)",
                            ParentCategorySchoolId = new Guid("1a6813df-3c87-4e00-b248-8a539ad6efb8"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 203
                        },
                        new
                        {
                            CategorySchoolId = new Guid("6f3b70c6-b1ef-4d91-b6f7-6aebda2c27b6"),
                            BranchId = new Guid("73a1b7a9-9be5-4eb2-a5bc-b703b4e3c2e5"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A form of philosophical inquiry that explores the problem of human existence and centers on the lived experience of the thinking, feeling, acting individual.",
                            Name = "Экзистенциализм (Existentialism)",
                            ParentCategorySchoolId = new Guid("d8c3503a-cffc-4031-aec5-3ae5e065c9db"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 204
                        },
                        new
                        {
                            CategorySchoolId = new Guid("9fbed9f3-0307-4d1d-85e2-40e65b9d11e2"),
                            BranchId = new Guid("73a1b7a9-9be5-4eb2-a5bc-b703b4e3c2e5"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A range of socio-political movements and ideologies that aim to define and establish the political, economic, personal, and social equality of the sexes.",
                            Name = "Феминизм (Feminism)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 205
                        },
                        new
                        {
                            CategorySchoolId = new Guid("d269cbd7-c08f-4af4-86f1-340f8123b94b"),
                            BranchId = new Guid("9b99ebf2-d3f7-4421-a9df-3d6a8cfa8e11"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A view appealing to reason as a source of knowledge or justification.",
                            Name = "Рационализм (Rationalism)",
                            ParentCategorySchoolId = new Guid("d9f7b18b-2523-46e5-a5c7-5df6d92fcf92"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 206
                        },
                        new
                        {
                            CategorySchoolId = new Guid("a8e7dba9-05b2-4bb5-91ae-e40182b3cd44"),
                            BranchId = new Guid("9b99ebf2-d3f7-4421-a9df-3d6a8cfa8e11"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A theory that states that knowledge comes only or primarily from sensory experience.",
                            Name = "Эмпиризм (Empiricism)",
                            ParentCategorySchoolId = new Guid("d9f7b18b-2523-46e5-a5c7-5df6d92fcf92"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 207
                        },
                        new
                        {
                            CategorySchoolId = new Guid("f8b35129-0e8c-4911-a8fd-b059cc41cf1f"),
                            BranchId = new Guid("73a1b7a9-9be5-4eb2-a5bc-b703b4e3c2e5"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A school of Hellenistic philosophy founded by Zeno of Citium in Athens in the early 3rd century BC.",
                            Name = "Стоицизм (Stoicism)",
                            ParentCategorySchoolId = new Guid("d69a7582-51d4-42d9-b0ad-6c5c4cebc47a"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 208
                        },
                        new
                        {
                            CategorySchoolId = new Guid("1a6813df-3c87-4e00-b248-8a539ad6efb8"),
                            BranchId = new Guid("9f04ed88-7f30-43ef-ae69-c3731b802496"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A philosophical movement that emerged in Germany in the late 18th and early 19th centuries.",
                            Name = "Немецкий идеализм (German Idealism)",
                            ParentCategorySchoolId = new Guid("d9f7b18b-2523-46e5-a5c7-5df6d92fcf92"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 209
                        },
                        new
                        {
                            CategorySchoolId = new Guid("ca9983b1-b143-4d0b-b6b7-5ed003efef59"),
                            BranchId = new Guid("9b99ebf2-d3f7-4421-a9df-3d6a8cfa8e11"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "The study of structures of consciousness as experienced from the first-person point of view.",
                            Name = "Феноменология (Phenomenology)",
                            ParentCategorySchoolId = new Guid("d8c3503a-cffc-4031-aec5-3ae5e065c9db"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 210
                        },
                        new
                        {
                            CategorySchoolId = new Guid("84250e5a-f4e3-4d08-975f-fb68e879eae5"),
                            BranchId = new Guid("d4623a52-4e63-42e6-b8a3-8750ad264f7c"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A movement in Western philosophy whose central thesis was the verification principle.",
                            Name = "Логический позитивизм (Logical Positivism)",
                            ParentCategorySchoolId = new Guid("8128a0e4-6c1b-49a2-9b11-2f1930a9ecdc"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 211
                        },
                        new
                        {
                            CategorySchoolId = new Guid("a4f9ef38-9e4e-4050-8a1f-7bb6a0b2964e"),
                            BranchId = new Guid("9f04ed88-7f30-43ef-ae69-c3731b802496"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A distinctive school of thought that emerged in Russia in the 19th and early 20th centuries.",
                            Name = "Русская религиозная философия (Russian Religious Philosophy)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 212
                        },
                        new
                        {
                            CategorySchoolId = new Guid("f353cd4d-396e-4bd9-bb29-08a8c2fd3907"),
                            BranchId = new Guid("9b99ebf2-d3f7-4421-a9df-3d6a8cfa8e11"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A term for philosophical and literary forms of theory that both build upon and reject ideas established by structuralism.",
                            Name = "Постструктурализм (Post-structuralism)",
                            ParentCategorySchoolId = new Guid("d8c3503a-cffc-4031-aec5-3ae5e065c9db"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 213
                        },
                        new
                        {
                            CategorySchoolId = new Guid("d69a7582-51d4-42d9-b0ad-6c5c4cebc47a"),
                            BranchId = new Guid("9f04ed88-7f30-43ef-ae69-c3731b802496"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Philosophy in Ancient Greece, from the 6th century BC to the Hellenistic period.",
                            Name = "Древнегреческая философия (Ancient Greek Philosophy)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 214
                        },
                        new
                        {
                            CategorySchoolId = new Guid("d9f7b18b-2523-46e5-a5c7-5df6d92fcf92"),
                            BranchId = new Guid("9b99ebf2-d3f7-4421-a9df-3d6a8cfa8e11"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Philosophy developed in the Western world during the early modern period (roughly 17th to 19th centuries).",
                            Name = "Философия Нового времени (Modern Philosophy)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 215
                        },
                        new
                        {
                            CategorySchoolId = new Guid("d8c3503a-cffc-4031-aec5-3ae5e065c9db"),
                            BranchId = new Guid("9f04ed88-7f30-43ef-ae69-c3731b802496"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A set of traditions of 19th and 20th-century philosophy from mainland Europe.",
                            Name = "Континентальная философия (Continental Philosophy)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 216
                        },
                        new
                        {
                            CategorySchoolId = new Guid("8128a0e4-6c1b-49a2-9b11-2f1930a9ecdc"),
                            BranchId = new Guid("d4623a52-4e63-42e6-b8a3-8750ad264f7c"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A tradition of philosophy characterized by an emphasis on clarity, argument, and formal logic.",
                            Name = "Аналитическая философия (Analytic Philosophy)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 217
                        },
                        new
                        {
                            CategorySchoolId = new Guid("14b3c490-6d37-4c8f-b0a2-d2e1e7d8ea64"),
                            BranchId = new Guid("9f04ed88-7f30-43ef-ae69-c3731b802496"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A method of critical thought which dominated teaching by the academics (scholastics, or schoolmen) of medieval universities in Europe from about 1100 to 1700.",
                            Name = "Схоластика (Scholasticism)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 218
                        },
                        new
                        {
                            CategorySchoolId = new Guid("5a4b54cb-36b7-4f9e-a028-3347d7c38de0"),
                            BranchId = new Guid("9f04ed88-7f30-43ef-ae69-c3731b802496"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "The group of metaphysical philosophies that assert that reality, or reality as humans can know it, is fundamentally mental, mentally constructed, or otherwise immaterial.",
                            Name = "Идеализм (Idealism)",
                            ParentCategorySchoolId = new Guid("1a6813df-3c87-4e00-b248-8a539ad6efb8"),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 219
                        },
                        new
                        {
                            CategorySchoolId = new Guid("f1cb027b-7f7e-4645-8668-b1526fdb7c86"),
                            BranchId = new Guid("9f04ed88-7f30-43ef-ae69-c3731b802496"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "The belief that reality exists independently of observers.",
                            Name = "Реализм (Realism)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 220
                        });
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Interaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("InteractionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<InteractionType>("InteractionType")
                        .HasColumnType("interaction_type");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<ItemType>("ItemType")
                        .HasColumnType("item_type");

                    b.Property<short?>("RatingValue")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InteractionTimestamp");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemType");

                    b.HasIndex("UserId");

                    b.ToTable("Interaction");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Notion", b =>
                {
                    b.Property<Guid>("NotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WikipediaId")
                        .HasColumnType("integer");

                    b.HasKey("NotionId");

                    b.ToTable("Notions");

                    b.HasData(
                        new
                        {
                            NotionId = new Guid("b624a80b-2594-4f57-b300-35dfd470087e"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Plato's theory that the physical world is not as real or true as timeless, absolute, unchangeable ideas.",
                            Name = "Теория форм (Theory of Forms)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 301
                        },
                        new
                        {
                            NotionId = new Guid("8261284d-1b86-432f-bd91-b6c5d8f9f191"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Kant's central philosophical concept in his deontological moral philosophy.",
                            Name = "Категорический императив (Categorical Imperative)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 302
                        },
                        new
                        {
                            NotionId = new Guid("e403af49-1a31-4dd9-984e-43b1dce3b43f"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Nietzsche's concept of a goal for humanity to set for itself.",
                            Name = "Сверхчеловек (Übermensch)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 303
                        },
                        new
                        {
                            NotionId = new Guid("6d4db55d-8c51-4fcb-b2c4-2b25f75a9cc3"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Heidegger's term for 'being-there' or 'presence', referring to the human way of being.",
                            Name = "Дазайн (Dasein)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 304
                        },
                        new
                        {
                            NotionId = new Guid("3cf7e7fd-fb56-42b9-bd2e-8c0bb0f2a057"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Locke's theory that individuals are born without built-in mental content and that therefore all knowledge comes from experience or perception.",
                            Name = "Чистая доска (Tabula Rasa)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 305
                        },
                        new
                        {
                            NotionId = new Guid("db90ef98-0a7e-4e7e-b730-9981e407d31d"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Descartes' famous philosophical proposition: 'I think, therefore I am'.",
                            Name = "Мыслю, следовательно, существую (Cogito, ergo sum)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 306
                        },
                        new
                        {
                            NotionId = new Guid("d18cc7a7-d229-4c5a-8ea1-b47a4e71c6a4"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A theory or model that originated during the Age of Enlightenment and usually concerns the legitimacy of the authority of the state over the individual.",
                            Name = "Общественный договор (Social Contract)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 307
                        },
                        new
                        {
                            NotionId = new Guid("f933e7d4-478f-442f-a1a5-8e2e0424375f"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A prominent concept in the philosophy of Friedrich Nietzsche, describing what he believed to be the main driving force in humans.",
                            Name = "Воля к власти (Will to Power)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 308
                        },
                        new
                        {
                            NotionId = new Guid("8adac4c3-007b-48f4-b76f-4b02128255c8"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A condition in social relationships reflected by a low degree of integration or common values and a high degree of distance or isolation between individuals, or between an individual and a group of people in a community or work environment.",
                            Name = "Отчуждение (Alienation)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 309
                        },
                        new
                        {
                            NotionId = new Guid("103d2dcf-1cfc-4b77-86b0-202f38ff702e"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A concept in psychology, existentialist philosophy and aesthetics concerning the degree to which an individual's actions are congruent with their beliefs and desires, despite external pressures.",
                            Name = "Аутентичность (Authenticity)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 310
                        },
                        new
                        {
                            NotionId = new Guid("c94fe294-924e-4d2d-9c5c-8c423924f01e"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "In philosophy, an irresolvable internal contradiction or logical disjunction in a text, argument, or theory.",
                            Name = "Апория (Aporia)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 311
                        },
                        new
                        {
                            NotionId = new Guid("f5ce7bd6-3802-45ae-875b-24b729c42f15"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A kind of logical argument that applies deductive reasoning to arrive at a conclusion based on two or more propositions that are asserted or assumed to be true.",
                            Name = "Силлогизм (Syllogism)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 312
                        },
                        new
                        {
                            NotionId = new Guid("169ae31e-4083-4a0f-8ea0-06ccf1e2f502"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "In Leibniz's philosophy, an elementary individual substance that reflects the universe from a specific viewpoint and is subject to its own internal laws of development.",
                            Name = "Монада (Monad)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 313
                        },
                        new
                        {
                            NotionId = new Guid("0055f212-4e67-4aa5-a1a3-3f7c05d2125f"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "In Husserl's phenomenology, the object or content of a thought, judgment, or perception, but as it is meant or intended in that thought.",
                            Name = "Ноэма (Noema)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 314
                        },
                        new
                        {
                            NotionId = new Guid("72e3c381-693e-46ae-b6d4-c74ed0e03f30"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A spiritual community of many jointly living people, a key concept in Russian religious philosophy.",
                            Name = "Соборность (Sobornost)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 315
                        });
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Philosopher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BirthDate")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeathDate")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFemale")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int?>("WikipediaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Philosophers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a228c5ef-ec5e-4eb0-b9a3-04ea1579fae0"),
                            Bio = "Ancient Greek philosopher, founder of the Platonist school of thought and the Academy.",
                            BirthDate = -428,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = -348,
                            IsFemale = false,
                            Name = "Платон (Plato)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 1
                        },
                        new
                        {
                            Id = new Guid("c0a792dd-3495-42ea-8011-dcc1e3702cf5"),
                            Bio = "Ancient Greek philosopher and scientist. His writings cover many subjects including physics, biology, zoology, metaphysics, logic, ethics, aesthetics, poetry, theatre, music, rhetoric, psychology, linguistics, economics, politics, and government.",
                            BirthDate = -384,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = -322,
                            IsFemale = false,
                            Name = "Аристотель (Aristotle)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 2
                        },
                        new
                        {
                            Id = new Guid("a72d3eac-0d82-4225-8bb3-cbe47c154b6d"),
                            Bio = "German philosopher, a central figure in modern philosophy. Argued that the human understanding is the source of the general laws of nature that structure all our experience.",
                            BirthDate = 1724,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1804,
                            IsFemale = false,
                            Name = "Иммануил Кант (Immanuel Kant)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 3
                        },
                        new
                        {
                            Id = new Guid("d249f9e2-bb3c-4e30-8611-7b573bfa1a97"),
                            Bio = "German philosopher, cultural critic, composer, poet, writer, and philologist whose work has exerted a profound influence on modern intellectual history.",
                            BirthDate = 1844,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1900,
                            IsFemale = false,
                            Name = "Фридрих Ницше (Friedrich Nietzsche)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 4
                        },
                        new
                        {
                            Id = new Guid("f1fd91e2-f7b2-4050-9ef4-34510e8f55b0"),
                            Bio = "French philosopher, playwright, novelist, screenwriter, political activist, biographer, and literary critic. He was one of the key figures in the philosophy of existentialism and phenomenology.",
                            BirthDate = 1905,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1980,
                            IsFemale = false,
                            Name = "Жан-Поль Сартр (Jean-Paul Sartre)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 5
                        },
                        new
                        {
                            Id = new Guid("7c6747a3-5d0c-4e60-9b3e-3205ee14e09b"),
                            Bio = "French writer, intellectual, existentialist philosopher, political activist, feminist, and social theorist.",
                            BirthDate = 1908,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1986,
                            IsFemale = true,
                            Name = "Симона де Бовуар (Simone de Beauvoir)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 6
                        },
                        new
                        {
                            Id = new Guid("008d29a5-5f43-4a7a-a425-726279154c08"),
                            Bio = "French philosopher, mathematician, and scientist. Dubbed the father of modern western philosophy.",
                            BirthDate = 1596,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1650,
                            IsFemale = false,
                            Name = "Рене Декарт (René Descartes)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 7
                        },
                        new
                        {
                            Id = new Guid("fa49f7a1-78db-41cf-9a71-d754a8509d3e"),
                            Bio = "English philosopher and physician, widely regarded as one of the most influential of Enlightenment thinkers and commonly known as the 'Father of Liberalism'.",
                            BirthDate = 1632,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1704,
                            IsFemale = false,
                            Name = "Джон Локк (John Locke)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 8
                        },
                        new
                        {
                            Id = new Guid("fca2f46b-8a3f-4268-901f-3021c7a62df2"),
                            Bio = "Scottish Enlightenment philosopher, historian, economist, and essayist, who is best known today for his highly influential system of philosophical empiricism, skepticism, and naturalism.",
                            BirthDate = 1711,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1776,
                            IsFemale = false,
                            Name = "Дэвид Юм (David Hume)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 9
                        },
                        new
                        {
                            Id = new Guid("d87ed2d5-24df-4054-b982-7640dc0e36c3"),
                            Bio = "Dutch philosopher of Portuguese Sephardi origin. One of the early thinkers of the Enlightenment and modern biblical criticism, including modern conceptions of the self and the universe.",
                            BirthDate = 1632,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1677,
                            IsFemale = false,
                            Name = "Бенедикт Спиноза (Baruch Spinoza)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 10
                        },
                        new
                        {
                            Id = new Guid("83cf4059-5701-417e-b508-f3cd23a27b6c"),
                            Bio = "German philosopher. Best known for his 1818 work The World as Will and Representation.",
                            BirthDate = 1788,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1860,
                            IsFemale = false,
                            Name = "Артур Шопенгауэр (Arthur Schopenhauer)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 11
                        },
                        new
                        {
                            Id = new Guid("06f2387c-b659-4ff7-8a10-161ec964c27d"),
                            Bio = "Danish philosopher, theologian, poet, social critic and religious author who is widely considered to be the first existentialist philosopher.",
                            BirthDate = 1813,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1855,
                            IsFemale = false,
                            Name = "Сёрен Кьеркегор (Søren Kierkegaard)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 12
                        },
                        new
                        {
                            Id = new Guid("a190be46-1e46-47e9-a6a2-b6d35cba17f1"),
                            Bio = "Austrian-British philosopher who worked primarily in logic, the philosophy of mathematics, the philosophy of mind, and the philosophy of language.",
                            BirthDate = 1889,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1951,
                            IsFemale = false,
                            Name = "Людвиг Витгенштейн (Ludwig Wittgenstein)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 13
                        },
                        new
                        {
                            Id = new Guid("9a1d2ebc-bd4b-4380-a665-9f28a2304dc3"),
                            Bio = "Russian philosopher, literary critic and scholar who worked on literary theory, ethics, and the philosophy of language.",
                            BirthDate = 1895,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1975,
                            IsFemale = false,
                            Name = "Михаил Бахтин (Mikhail Bakhtin)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 14
                        },
                        new
                        {
                            Id = new Guid("d2854bb6-9f28-4c8a-a2a5-82c748c5d83e"),
                            Bio = "Russian philosopher, theologian, poet, pamphleteer, and literary critic. He played a significant role in the development of Russian philosophy and poetry at the end of the 19th century and in the spiritual renaissance of the early 20th century.",
                            BirthDate = 1853,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1900,
                            IsFemale = false,
                            Name = "Владимир Соловьёв (Vladimir Solovyov)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 15
                        },
                        new
                        {
                            Id = new Guid("529a3704-c1a1-4bcd-9af1-12676c07a278"),
                            Bio = "Russian political and Christian existentialist philosopher who emphasized the existential spiritual significance of human freedom and the human person.",
                            BirthDate = 1874,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1948,
                            IsFemale = false,
                            Name = "Николай Бердяев (Nikolai Berdyaev)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 16
                        },
                        new
                        {
                            Id = new Guid("4f789f71-7e29-49e2-8fc9-18334f09a97f"),
                            Bio = "Russian existentialist philosopher, known for his 'philosophy of despair' and his critique of rationalism.",
                            BirthDate = 1866,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1938,
                            IsFemale = false,
                            Name = "Лев Шестов (Lev Shestov)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 17
                        },
                        new
                        {
                            Id = new Guid("4c6d4f23-3c60-4f4e-bbc0-0e70b83cfb77"),
                            Bio = "Russian philosopher, philologist and culturologist, one of the most prominent figures in Russian philosophical and religious thought of the 20th century.",
                            BirthDate = 1893,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1988,
                            IsFemale = false,
                            Name = "Алексей Лосев (Aleksei Losev)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 18
                        },
                        new
                        {
                            Id = new Guid("e93bb57f-c81d-4a4f-b5ae-fbcb3493c0e7"),
                            Bio = "German-born American political theorist. Her work deals with the nature of power, and the subjects of politics, direct democracy, authority, and totalitarianism.",
                            BirthDate = 1906,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1975,
                            IsFemale = true,
                            Name = "Ханна Арендт (Hannah Arendt)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 19
                        },
                        new
                        {
                            Id = new Guid("25579215-4d3e-4205-981a-27ef7083a83c"),
                            Bio = "French philosopher, historian of ideas, writer, political activist, and literary critic. Foucault's theories primarily address the relationship between power and knowledge, and how they are used as a form of social control through societal institutions.",
                            BirthDate = 1926,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            DeathDate = 1984,
                            IsFemale = false,
                            Name = "Мишель Фуко (Michel Foucault)",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Version = 0u,
                            WikipediaId = 20
                        });
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.RelatedNotion", b =>
                {
                    b.Property<Guid>("NotionIdFrom")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotionIdTo")
                        .HasColumnType("uuid");

                    b.Property<string>("RelationshipType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("NotionIdFrom", "NotionIdTo");

                    b.HasIndex("NotionIdTo");

                    b.ToTable("RelatedNotion");

                    b.HasData(
                        new
                        {
                            NotionIdFrom = new Guid("e403af49-1a31-4dd9-984e-43b1dce3b43f"),
                            NotionIdTo = new Guid("f933e7d4-478f-442f-a1a5-8e2e0424375f"),
                            RelationshipType = "RelatedConcept"
                        },
                        new
                        {
                            NotionIdFrom = new Guid("6d4db55d-8c51-4fcb-b2c4-2b25f75a9cc3"),
                            NotionIdTo = new Guid("103d2dcf-1cfc-4b77-86b0-202f38ff702e"),
                            RelationshipType = "RelatedConcept"
                        });
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("Embeddings")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("PrimaryAuthorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("integer");

                    b.Property<WorkTypes>("Type")
                        .HasColumnType("work_types");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WikipediaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Embeddings");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Embeddings"), "GIN");

                    b.HasIndex("PrimaryAuthorId");

                    b.ToTable("Works");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3eb03c5e-d5a6-4704-833a-c7d41d223089"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Socratic dialogue concerning justice, the order and character of the just city-state, and the just man.",
                            Name = "Государство (The Republic)",
                            PrimaryAuthorId = new Guid("a228c5ef-ec5e-4eb0-b9a3-04ea1579fae0"),
                            PublicationYear = -375,
                            Type = WorkTypes.Interview,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 101
                        },
                        new
                        {
                            Id = new Guid("86b5e3f1-5b32-42f1-94b3-948c0623727e"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Aristotle's best-known work on ethics, the science of the good for human life.",
                            Name = "Никомахова этика (Nicomachean Ethics)",
                            PrimaryAuthorId = new Guid("c0a792dd-3495-42ea-8011-dcc1e3702cf5"),
                            PublicationYear = -340,
                            Type = WorkTypes.Treatise,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 102
                        },
                        new
                        {
                            Id = new Guid("c6a32d79-d78c-4b5e-90aa-1a680d7fc130"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Explores the nature of human reason and its limits.",
                            Name = "Критика чистого разума (Critique of Pure Reason)",
                            PrimaryAuthorId = new Guid("a72d3eac-0d82-4225-8bb3-cbe47c154b6d"),
                            PublicationYear = 1781,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 103
                        },
                        new
                        {
                            Id = new Guid("34f3e2e3-1639-4d68-b30c-7e25cf5bb158"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A philosophical novel exploring ideas like the 'death of God', the Übermensch, and the will to power.",
                            Name = "Так говорил Заратустра (Thus Spoke Zarathustra)",
                            PrimaryAuthorId = new Guid("d249f9e2-bb3c-4e30-8611-7b573bfa1a97"),
                            PublicationYear = 1883,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 104
                        },
                        new
                        {
                            Id = new Guid("6ff8c3b7-e212-4a2d-b3f0-399b1c81350f"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "An essay on phenomenological ontology, considered a foundational text of existentialism.",
                            Name = "Бытие и ничто (Being and Nothingness)",
                            PrimaryAuthorId = new Guid("f1fd91e2-f7b2-4050-9ef4-34510e8f55b0"),
                            PublicationYear = 1943,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 105
                        },
                        new
                        {
                            Id = new Guid("f4ed4dc0-d69c-494f-a7a6-8f83de9cf862"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A detailed analysis of women's oppression and a foundational tract of contemporary feminism.",
                            Name = "Второй пол (The Second Sex)",
                            PrimaryAuthorId = new Guid("7c6747a3-5d0c-4e60-9b3e-3205ee14e09b"),
                            PublicationYear = 1949,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 106
                        },
                        new
                        {
                            Id = new Guid("fcd0984e-3e80-4993-8e28-32bd843b1059"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A foundational text of modern philosophy, exploring epistemological certainty.",
                            Name = "Размышления о первой философии (Meditations on First Philosophy)",
                            PrimaryAuthorId = new Guid("008d29a5-5f43-4a7a-a425-726279154c08"),
                            PublicationYear = 1641,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 107
                        },
                        new
                        {
                            Id = new Guid("2e994d2d-e383-470f-91c6-59ccbb4e5864"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A work concerning the foundation of human knowledge and understanding.",
                            Name = "Опыт о человеческом разумении (An Essay Concerning Human Understanding)",
                            PrimaryAuthorId = new Guid("fa49f7a1-78db-41cf-9a71-d754a8509d3e"),
                            PublicationYear = 1689,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 108
                        },
                        new
                        {
                            Id = new Guid("67a2c986-cb52-4cb1-8495-d98994db7ccf"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A book by Scottish philosopher David Hume, considered by many to be Hume's most important work and one of the most influential works in the history of philosophy.",
                            Name = "Трактат о человеческой природе (A Treatise of Human Nature)",
                            PrimaryAuthorId = new Guid("fca2f46b-8a3f-4268-901f-3021c7a62df2"),
                            PublicationYear = 1739,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 109
                        },
                        new
                        {
                            Id = new Guid("d113c8d7-72b6-4bde-99ff-90aa9fa8c8f0"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "Spinoza's magnum opus, a philosophical treatise written in Latin.",
                            Name = "Этика (Ethics, Demonstrated in Geometrical Order)",
                            PrimaryAuthorId = new Guid("d87ed2d5-24df-4054-b982-7640dc0e36c3"),
                            PublicationYear = 1677,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 110
                        },
                        new
                        {
                            Id = new Guid("985f8a06-b109-4a38-a4a5-b6d62a2d9e37"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "The central work of the German philosopher Arthur Schopenhauer.",
                            Name = "Мир как воля и представление (The World as Will and Representation)",
                            PrimaryAuthorId = new Guid("83cf4059-5701-417e-b508-f3cd23a27b6c"),
                            PublicationYear = 1818,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 111
                        },
                        new
                        {
                            Id = new Guid("7ff2f8e7-e5f2-4ab0-ae2a-1801248f1ad3"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A philosophical work by Søren Kierkegaard, published in 1843 under the pseudonym Johannes de silentio.",
                            Name = "Страх и трепет (Fear and Trembling)",
                            PrimaryAuthorId = new Guid("06f2387c-b659-4ff7-8a10-161ec964c27d"),
                            PublicationYear = 1843,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 112
                        },
                        new
                        {
                            Id = new Guid("914d6b7c-3e4e-42a7-a8b4-33815a239764"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "The only book-length philosophical work by the Austrian philosopher Ludwig Wittgenstein that was published during his lifetime.",
                            Name = "Логико-философский трактат (Tractatus Logico-Philosophicus)",
                            PrimaryAuthorId = new Guid("a190be46-1e46-47e9-a6a2-b6d35cba17f1"),
                            PublicationYear = 1921,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 113
                        },
                        new
                        {
                            Id = new Guid("34f19353-1d4f-4e3b-91e1-4e83b23e7b5c"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A major work of literary theory and analysis by Mikhail Bakhtin.",
                            Name = "Проблемы поэтики Достоевского (Problems of Dostoevsky's Poetics)",
                            PrimaryAuthorId = new Guid("9a1d2ebc-bd4b-4380-a665-9f28a2304dc3"),
                            PublicationYear = 1929,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 114
                        },
                        new
                        {
                            Id = new Guid("a58f52a0-44c2-41bc-8928-29a99cf5d4cf"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A series of lectures outlining Solovyov's sophiology and concept of Godmanhood.",
                            Name = "Чтения о богочеловечестве (Lectures on Godmanhood)",
                            PrimaryAuthorId = new Guid("d2854bb6-9f28-4c8a-a2a5-82c748c5d83e"),
                            PublicationYear = 1881,
                            Type = WorkTypes.Lecture,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 115
                        },
                        new
                        {
                            Id = new Guid("fa5c4237-62b7-4fe9-bc29-e0498d7f5488"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "An essay on the philosophy of history by Nikolai Berdyaev.",
                            Name = "Смысл истории (The Meaning of History)",
                            PrimaryAuthorId = new Guid("529a3704-c1a1-4bcd-9af1-12676c07a278"),
                            PublicationYear = 1923,
                            Type = WorkTypes.Essay,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 116
                        },
                        new
                        {
                            Id = new Guid("e1ed7dd5-86d6-4c5d-8594-46e59aab6b8c"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A philosophical work contrasting Greek rationalism with Hebraic revelation.",
                            Name = "Афины и Иерусалим (Athens and Jerusalem)",
                            PrimaryAuthorId = new Guid("4f789f71-7e29-49e2-8fc9-18334f09a97f"),
                            PublicationYear = 1938,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 117
                        },
                        new
                        {
                            Id = new Guid("5c369d59-f8c4-40f0-9a41-d13015d3c3a6"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A key work by Aleksei Losev on the nature of myth and its relation to consciousness and reality.",
                            Name = "Диалектика мифа (The Dialectic of Myth)",
                            PrimaryAuthorId = new Guid("4c6d4f23-3c60-4f4e-bbc0-0e70b83cfb77"),
                            PublicationYear = 1930,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 118
                        },
                        new
                        {
                            Id = new Guid("14a7d015-2ea1-4917-a67d-79050a8c2284"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "A major work by Hannah Arendt discussing the vita activa (active life) in contrast to the vita contemplativa (contemplative life).",
                            Name = "Vita activa, или О деятельной жизни (The Human Condition)",
                            PrimaryAuthorId = new Guid("e93bb57f-c81d-4a4f-b5ae-fbcb3493c0e7"),
                            PublicationYear = 1958,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 119
                        },
                        new
                        {
                            Id = new Guid("3f1b9e6a-39f1-4f33-9ea5-7b6a68a9e267"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            Description = "An analysis of the social and theoretical mechanisms behind the changes in Western penal systems during the modern age.",
                            Name = "Надзирать и наказывать (Discipline and Punish: The Birth of the Prison)",
                            PrimaryAuthorId = new Guid("25579215-4d3e-4205-981a-27ef7083a83c"),
                            PublicationYear = 1975,
                            Type = WorkTypes.Book,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(17356896000000000L),
                            WikipediaId = 120
                        });
                });

            modelBuilder.Entity("CategorySchoolNotion", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.CategorySchool", null)
                        .WithMany()
                        .HasForeignKey("CategorySchoolsCategorySchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.Notion", null)
                        .WithMany()
                        .HasForeignKey("NotionsNotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategorySchoolPhilosopher", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.CategorySchool", null)
                        .WithMany()
                        .HasForeignKey("CategorySchoolsCategorySchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.Philosopher", null)
                        .WithMany()
                        .HasForeignKey("PhilosophersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategorySchoolWork", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.CategorySchool", null)
                        .WithMany()
                        .HasForeignKey("CategorySchoolsCategorySchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.Work", null)
                        .WithMany()
                        .HasForeignKey("WorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotionWork", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.Notion", null)
                        .WithMany()
                        .HasForeignKey("NotionsNotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.Work", null)
                        .WithMany()
                        .HasForeignKey("RelatedItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.CategorySchool", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.Branch", "Branch")
                        .WithMany("CategorySchools")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.CategorySchool", "ParentCategorySchool")
                        .WithMany("ChildCategoriesSchools")
                        .HasForeignKey("ParentCategorySchoolId");

                    b.Navigation("Branch");

                    b.Navigation("ParentCategorySchool");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Interaction", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.User", "User")
                        .WithMany("Interactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.RelatedNotion", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.Notion", "NotionFrom")
                        .WithMany("RelatedNotions")
                        .HasForeignKey("NotionIdFrom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.Notion", "NotionTo")
                        .WithMany()
                        .HasForeignKey("NotionIdTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotionFrom");

                    b.Navigation("NotionTo");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Work", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.Philosopher", "PrimaryAuthor")
                        .WithMany("Works")
                        .HasForeignKey("PrimaryAuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PrimaryAuthor");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Branch", b =>
                {
                    b.Navigation("CategorySchools");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.CategorySchool", b =>
                {
                    b.Navigation("ChildCategoriesSchools");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Notion", b =>
                {
                    b.Navigation("RelatedNotions");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Philosopher", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.User", b =>
                {
                    b.Navigation("Interactions");
                });
#pragma warning restore 612, 618
        }
    }
}
