// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using Philosophers_Catalogue;
using Philosophers_Catalogue.Models.Enums;

#nullable disable

namespace Philosophers_Catalogue.Migrations
{
    [DbContext(typeof(PhilosophersCatalogueDbContext))]
    [Migration("20250511111810_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "interaction_type", new[] { "dislike", "like", "none", "read_complete", "read_start", "save_for_later", "view" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_type", new[] { "branch", "category_school", "not_specified", "notion", "philosopher", "work" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "work_types", new[] { "book", "collection", "essay", "interview", "lecture", "none", "quotes", "treatise" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategorySchoolNotion", b =>
                {
                    b.Property<Guid>("CategoriesSchoolsCategorySchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotionId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesSchoolsCategorySchoolId", "NotionId");

                    b.HasIndex("NotionId");

                    b.ToTable("CategorySchoolNotion");
                });

            modelBuilder.Entity("CategorySchoolPhilosopher", b =>
                {
                    b.Property<Guid>("CategorySchoolsCategorySchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhilosopherId")
                        .HasColumnType("uuid");

                    b.HasKey("CategorySchoolsCategorySchoolId", "PhilosopherId");

                    b.HasIndex("PhilosopherId");

                    b.ToTable("CategorySchoolPhilosopher");
                });

            modelBuilder.Entity("CategorySchoolWork", b =>
                {
                    b.Property<Guid>("CategoriesSchoolsCategorySchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesSchoolsCategorySchoolId", "WorkId");

                    b.HasIndex("WorkId");

                    b.ToTable("CategorySchoolWork");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NotionWork", b =>
                {
                    b.Property<Guid>("NotionsNotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelatedItemsId")
                        .HasColumnType("uuid");

                    b.HasKey("NotionsNotionId", "RelatedItemsId");

                    b.HasIndex("RelatedItemsId");

                    b.ToTable("NotionWork");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("WikipediaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.CategorySchool", b =>
                {
                    b.Property<Guid>("CategorySchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("ParentCategorySchoolId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WikipediaId")
                        .HasColumnType("integer");

                    b.HasKey("CategorySchoolId");

                    b.HasIndex("BranchId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentCategorySchoolId");

                    b.ToTable("CategorySchools");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Interaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("InteractionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<InteractionType>("InteractionType")
                        .HasColumnType("interaction_type");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<ItemType>("ItemType")
                        .HasColumnType("item_type");

                    b.Property<short?>("RatingValue")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InteractionTimestamp");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemType");

                    b.HasIndex("UserId");

                    b.ToTable("Interaction");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Notion", b =>
                {
                    b.Property<Guid>("NotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WikipediaId")
                        .HasColumnType("integer");

                    b.HasKey("NotionId");

                    b.ToTable("Notions");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Philosopher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDate>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<LocalDate>("DeathDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsFemale")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int?>("WikipediaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Philosophers");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.RelatedNotion", b =>
                {
                    b.Property<Guid>("NotionIdFrom")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotionIdTo")
                        .HasColumnType("uuid");

                    b.Property<string>("RelationshipType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("NotionIdFrom", "NotionIdTo");

                    b.HasIndex("NotionIdTo");

                    b.ToTable("RelatedNotion");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("Embeddings")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("PrimaryAuthorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("integer");

                    b.Property<WorkTypes>("Type")
                        .HasColumnType("work_types");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WikipediaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Embeddings");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Embeddings"), "GIN");

                    b.HasIndex("PrimaryAuthorId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("CategorySchoolNotion", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.CategorySchool", null)
                        .WithMany()
                        .HasForeignKey("CategoriesSchoolsCategorySchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.Notion", null)
                        .WithMany()
                        .HasForeignKey("NotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategorySchoolPhilosopher", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.CategorySchool", null)
                        .WithMany()
                        .HasForeignKey("CategorySchoolsCategorySchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.Philosopher", null)
                        .WithMany()
                        .HasForeignKey("PhilosopherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategorySchoolWork", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.CategorySchool", null)
                        .WithMany()
                        .HasForeignKey("CategoriesSchoolsCategorySchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.Work", null)
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotionWork", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.Notion", null)
                        .WithMany()
                        .HasForeignKey("NotionsNotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.Work", null)
                        .WithMany()
                        .HasForeignKey("RelatedItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.CategorySchool", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.Branch", "Branch")
                        .WithMany("CategorySchools")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.CategorySchool", "ParentCategorySchool")
                        .WithMany("ChildCategoriesSchools")
                        .HasForeignKey("ParentCategorySchoolId");

                    b.Navigation("Branch");

                    b.Navigation("ParentCategorySchool");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Interaction", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.User", "User")
                        .WithMany("Interactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.RelatedNotion", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.Notion", "NotionFrom")
                        .WithMany("RelatedNotions")
                        .HasForeignKey("NotionIdFrom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Philosophers_Catalogue.Models.Notion", "NotionTo")
                        .WithMany()
                        .HasForeignKey("NotionIdTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotionFrom");

                    b.Navigation("NotionTo");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Work", b =>
                {
                    b.HasOne("Philosophers_Catalogue.Models.Philosopher", "PrimaryAuthor")
                        .WithMany("Works")
                        .HasForeignKey("PrimaryAuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PrimaryAuthor");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Branch", b =>
                {
                    b.Navigation("CategorySchools");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.CategorySchool", b =>
                {
                    b.Navigation("ChildCategoriesSchools");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Notion", b =>
                {
                    b.Navigation("RelatedNotions");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.Philosopher", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("Philosophers_Catalogue.Models.User", b =>
                {
                    b.Navigation("Interactions");
                });
#pragma warning restore 612, 618
        }
    }
}
